#!/usr/bin/env python3
"""
EXTREME VOICE FIX
S·ª≠a video ƒë·ªÉ voice si√™u to, nghe r√µ t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi
"""

import os
import glob
import subprocess
import sys

def find_latest_files():
    """T√¨m video v√† voice file m·ªõi nh·∫•t"""
    
    # T√¨m video g·ªëc
    video_files = glob.glob("uploads/*.mp4")
    if not video_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y video trong uploads/")
        return None, None, None
    
    latest_video = max(video_files, key=os.path.getctime)
    
    # T√¨m voice file  
    voice_files = glob.glob("outputs/*_voice.wav")
    if not voice_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y voice file trong outputs/")
        return None, None, None
        
    latest_voice = max(voice_files, key=os.path.getctime)
    
    # T√¨m SRT file
    srt_files = glob.glob("outputs/*.srt")
    latest_srt = None
    if srt_files:
        latest_srt = max(srt_files, key=os.path.getctime)
    
    return latest_video, latest_voice, latest_srt

def extreme_voice_boost(video_path, voice_path, srt_path=None, output_path="EXTREME_VOICE_VIDEO.mp4"):
    """T·∫°o video v·ªõi voice si√™u to"""
    
    print(f"üé¨ T·∫°o video v·ªõi EXTREME VOICE BOOST")
    print(f"üìº Video: {os.path.basename(video_path)}")
    print(f"üé§ Voice: {os.path.basename(voice_path)}")
    print(f"üìÑ SRT: {os.path.basename(srt_path) if srt_path else 'Kh√¥ng c√≥'}")
    print("="*60)
    
    # Test c√°c m·ª©c volume kh√°c nhau
    test_volumes = [50, 75, 100, 150, 200]
    
    for volume in test_volumes:
        test_output = f"test_voice_{volume}x.mp4"
        print(f"\nüîä TEST VOLUME {volume}x...")
        
        cmd = ['ffmpeg', '-i', video_path, '-i', voice_path]
        
        if srt_path and os.path.exists(srt_path):
            # V·ªõi subtitle + extreme voice boost
            srt_escaped = srt_path.replace('\\', '/')
            filter_complex = f"[0:v]subtitles='{srt_escaped}'[v];[1:a]volume={volume},loudnorm=I=-12:LRA=7:TP=-1.0,volume=2.0[voice];[voice]anull[a]"
            cmd.extend([
                '-filter_complex', filter_complex,
                '-map', '[v]', '-map', '[a]'
            ])
        else:
            # Ch·ªâ extreme voice boost
            filter_complex = f"[1:a]volume={volume},loudnorm=I=-12:LRA=7:TP=-1.0,volume=2.0[voice];[voice]anull[a]"
            cmd.extend([
                '-filter_complex', filter_complex,
                '-map', '0:v', '-map', '[a]'
            ])
        
        # Encoding settings cho quality cao
        cmd.extend([
            '-c:v', 'libx264',
            '-preset', 'fast', 
            '-crf', '20',
            '-c:a', 'aac',
            '-b:a', '192k',
            '-movflags', '+faststart',
            test_output, '-y'
        ])
        
        print(f"   ‚ö° Ch·∫°y FFmpeg v·ªõi volume {volume}x...")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            file_size = os.path.getsize(test_output) / (1024*1024)
            print(f"   ‚úÖ TH√ÄNH C√îNG! File: {file_size:.1f}MB")
            
            # ƒê·ªïi t√™n th√†nh file ch√≠nh n·∫øu l√† volume cao nh·∫•t
            if volume == test_volumes[-1]:
                if os.path.exists(output_path):
                    os.remove(output_path)
                os.rename(test_output, output_path)
                print(f"   üéØ L∆∞u l√†m file ch√≠nh: {output_path}")
            else:
                # X√≥a file test
                if os.path.exists(test_output):
                    os.remove(test_output)
        else:
            print(f"   ‚ùå TH·∫§T B·∫†I!")
            print(f"   L·ªói: {result.stderr[:200]}...")
    
    return output_path

def analyze_voice_levels(voice_path):
    """Ph√¢n t√≠ch m·ª©c volume c·ªßa voice file"""
    print(f"\nüîç PH√ÇN T√çCH VOICE LEVELS")
    print("="*40)
    
    cmd = [
        'ffprobe', '-v', 'quiet', '-af', 'volumedetect', 
        '-f', 'null', '/dev/null', '-i', voice_path
    ]
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode == 0:
        lines = result.stderr.split('\n')
        for line in lines:
            if any(keyword in line for keyword in ['mean_volume', 'max_volume', 'histogram']):
                print(f"   {line.strip()}")
        
        # Extract mean volume for analysis
        for line in lines:
            if "mean_volume" in line:
                try:
                    db_value = float(line.split(':')[1].strip().replace(' dB', ''))
                    print(f"\nüìä ANALYSIS:")
                    if db_value < -30:
                        print("   ‚ö†Ô∏è Voice R·∫§T NH·ªé! C·∫ßn boost c·ª±c m·∫°nh")
                        suggested_boost = int(abs(db_value) * 2)
                        print(f"   üí° Khuy·∫øn ngh·ªã volume: {suggested_boost}x")
                    elif db_value < -20:
                        print("   ‚ö†Ô∏è Voice nh·ªè, c·∫ßn boost m·∫°nh")
                    elif db_value < -10:
                        print("   ‚úÖ Voice ·ªïn, c√≥ th·ªÉ boost nh·∫π")
                    else:
                        print("   ‚úÖ Voice ƒë√£ ƒë·ªß to")
                    break
                except:
                    pass
    else:
        print("‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch voice levels")

def main():
    print("üöÄ EXTREME VOICE FIX TOOL")
    print("=" * 60)
    
    # T√¨m files
    video_path, voice_path, srt_path = find_latest_files()
    
    if not video_path or not voice_path:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªß files c·∫ßn thi·∫øt!")
        return
    
    print(f"‚úÖ T√¨m th·∫•y files:")
    print(f"   üìº Video: {os.path.basename(video_path)}")
    print(f"   üé§ Voice: {os.path.basename(voice_path)}")
    print(f"   üìÑ SRT: {os.path.basename(srt_path) if srt_path else 'Kh√¥ng c√≥'}")
    
    # Ph√¢n t√≠ch voice tr∆∞·ªõc
    analyze_voice_levels(voice_path)
    
    # T·∫°o video v·ªõi extreme boost
    output_file = extreme_voice_boost(video_path, voice_path, srt_path)
    
    print(f"\nüéâ HO√ÄN TH√ÄNH!")
    print(f"üìÅ File output: {output_file}")
    print(f"üí° Gi·ªù th·ª≠ nghe video n√†y - voice should be SI√äU TO!")
    
    # Final check
    if os.path.exists(output_file):
        final_size = os.path.getsize(output_file) / (1024*1024)
        print(f"üìè K√≠ch th∆∞·ªõc final: {final_size:.1f}MB")
    
    print("\nüéØ H∆Ø·ªöNG D·∫™N:")
    print("1. M·ªü file 'EXTREME_VOICE_VIDEO.mp4'")
    print("2. Ki·ªÉm tra xem voice c√≥ nghe r√µ t·ª´ ƒë·∫ßu video kh√¥ng") 
    print("3. N·∫øu v·∫´n kh√¥ng ƒë·ªß to, ch·∫°y l·∫°i script n√†y")
    print("4. Script s·∫Ω test nhi·ªÅu m·ª©c volume kh√°c nhau")

if __name__ == "__main__":
    main() 